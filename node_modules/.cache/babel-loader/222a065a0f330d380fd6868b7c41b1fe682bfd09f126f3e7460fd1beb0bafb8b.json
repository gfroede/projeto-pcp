{"ast":null,"code":"var _jsxFileName = \"C:\\\\controlepcp\\\\visualizador-producao\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n\n  // Função para buscar os dados da planilha\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('https://sheets.googleapis.com/v4/spreadsheets/1dgVHy_i0djzz8ncd1L2zOkzI3qy7YSbT7CvV_BPgXm0/values/Sheet1?key=AIzaSyDjQkkzbl0VCCBFMc7sDWliSu6sHAykP3A');\n        console.log(response.data); // Exibe os dados no console\n        setData(response.data.values); // Armazena os dados no estado\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Verificar se há dados antes de renderizar\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando dados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Gerar dinamicamente as colunas da tabela\n  const headers = data[0]; // Primeira linha são os cabeçalhos das colunas\n  const rows = data.slice(1); // O restante são os dados das linhas\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dados da Planilha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this) // Exibe as colunas dinamicamente\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this) // Preenche as células dinamicamente\n          )\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","data","setData","fetchData","response","get","console","log","values","error","length","children","fileName","_jsxFileName","lineNumber","columnNumber","headers","rows","slice","className","map","header","index","row","rowIndex","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/controlepcp/visualizador-producao/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  // Função para buscar os dados da planilha\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          'https://sheets.googleapis.com/v4/spreadsheets/1dgVHy_i0djzz8ncd1L2zOkzI3qy7YSbT7CvV_BPgXm0/values/Sheet1?key=AIzaSyDjQkkzbl0VCCBFMc7sDWliSu6sHAykP3A'\r\n        );\r\n        console.log(response.data); // Exibe os dados no console\r\n        setData(response.data.values); // Armazena os dados no estado\r\n      } catch (error) {\r\n        console.error('Error fetching data', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Verificar se há dados antes de renderizar\r\n  if (data.length === 0) {\r\n    return <div>Carregando dados...</div>;\r\n  }\r\n\r\n  // Gerar dinamicamente as colunas da tabela\r\n  const headers = data[0]; // Primeira linha são os cabeçalhos das colunas\r\n  const rows = data.slice(1); // O restante são os dados das linhas\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Dados da Planilha</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {headers.map((header, index) => (\r\n              <th key={index}>{header}</th> // Exibe as colunas dinamicamente\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, cellIndex) => (\r\n                <td key={cellIndex}>{cell}</td> // Preenche as células dinamicamente\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}